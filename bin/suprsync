#!/usr/bin/env python3
"""
Utility script for interacting with the suprsync db.
"""
from socs.db.suprsync import SupRsyncFilesManager, SupRsyncFile
import argparse


def check_func(args):
    srfm = SupRsyncFilesManager(args.db, create_all=False)

    session = srfm.Session()
    file = session.query(SupRsyncFile).filter(
        SupRsyncFile.local_path == args.file
    ).one()
    print('-' * 80)
    print(file)
    print('-' * 80)


def next_func(args):
    srfm = SupRsyncFilesManager(args.db, create_all=False)
    file = srfm.get_next_file(args.archive_name)
    if file is None:
        print("No more files left to be copied")
    else:
        print(file)


def list_func(args):
    srfm = SupRsyncFilesManager(args.db, create_all=False)
    with srfm.Session.begin() as session:
        query = session.query(SupRsyncFile).filter(
            SupRsyncFile.removed == None,
            SupRsyncFile.archive_name == args.archive_name
        )
        files = query.all()
        count = 0
        for f in files:
            if f.local_md5sum == f.remote_md5sum:
                continue
            print(f"{count}: {f.local_path}")
            count += 1
        if count == 0:
            print(f"No files to be copied")


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    default_db = '/data/so/dbs/suprsync.db'

    check_parser = subparsers.add_parser(
        'check',
        help="Checks suprsync file entry for a given local file.")
    check_parser.set_defaults(func=check_func)
    check_parser.add_argument('file', type=str,
                              help="File path to check in the suprsync db")
    check_parser.add_argument('--db', default=default_db, help='db path')

    next_parser = subparsers.add_parser(
        'next',
        help="Returns file info for next file to be handled in the db"
    )
    next_parser.set_defaults(func=next_func)
    next_parser.add_argument('archive_name',
                             help='Name of archive to get next file')
    next_parser.add_argument('--db', default=default_db, help='db path')

    list_parser = subparsers.add_parser('list')
    list_parser.set_defaults(func=list_func)
    list_parser.add_argument('archive_name',
                             help='Name of archive to get next file')
    list_parser.add_argument('--db', default=default_db)

    args = parser.parse_args()
    if hasattr(args, 'func'):
        args.func(args)
    else:
        parser.print_help()
